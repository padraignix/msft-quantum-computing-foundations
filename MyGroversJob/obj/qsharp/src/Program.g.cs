//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"SampleManyRandomBits\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":39}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"idxMarked\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":56}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nBits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":64},\"Item2\":{\"Line\":1,\"Column\":69}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"SampleManyRandomBits\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":19,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"EstimateHeadsProbability\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":23,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nShots\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":42}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Double\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"EstimateHeadsProbability\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":24,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":35}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"GroversTest\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"idxMarked\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":47}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"GroversTest\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"NIterations\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":49,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"nQubits\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Int\"},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"NIterations\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":49,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"MarkingNumber\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"idxMarked\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inputQubits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"MarkingNumber\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"MarkingNumber\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsAdjoint specialization for MyGroversJob.MarkingNumber\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"MarkingNumber\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlled specialization for MyGroversJob.MarkingNumber\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"MarkingNumber\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":56,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":5,\"Column\":17},\"Item2\":{\"Line\":5,\"Column\":24}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for MyGroversJob.MarkingNumber\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":64,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markingOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":17}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":64,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":42}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"ApplyMarkingOracleAsPhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":64,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":17},\"Item2\":{\"Line\":4,\"Column\":20}},\"Documentation\":[\"automatically generated QsAdjoint specialization for MyGroversJob.ApplyMarkingOracleAsPhaseOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":28},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"phaseOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":48},\"Item2\":{\"Line\":1,\"Column\":59}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"iterations\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":90},\"Item2\":{\"Line\":1,\"Column\":100}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"RunGroversSearch\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":78,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"ReflectAboutUniform\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"inputQubits\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":42}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MyGroversJob\",\"Name\":\"ReflectAboutUniform\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\padra\\\\OneDrive\\\\Documents\\\\GitHub\\\\msft-quantum-foundations\\\\MyGroversJob\\\\Program.qs\",\"Position\":{\"Item1\":86,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
#line hidden
namespace MyGroversJob
{
    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 20, 25)]
    public partial class SampleManyRandomBits : Operation<(Int64,Int64,Int64), IQArray<IQArray<Result>>>, ICallable
    {
        public SampleManyRandomBits(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "SampleManyRandomBits";
        String ICallable.FullName => "MyGroversJob.SampleManyRandomBits";
        protected ICallable Microsoft__Quantum__Arrays__DrawMany
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), IQArray<Result>> GroversTest__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), IQArray<IQArray<Result>>> __Body__ => (__in__) =>
        {
            var (nQubits,idxMarked,nBits) = __in__;
#line 21 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            return Microsoft__Quantum__Arrays__DrawMany.Apply<IQArray<IQArray<Result>>>((GroversTest__, nBits, (nQubits, idxMarked)));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arrays__DrawMany = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.DrawMany<,>));
            this.GroversTest__ = this.__Factory__.Get<ICallable<(Int64,Int64), IQArray<Result>>>(typeof(GroversTest));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<IQArray<Result>> data) => data;
        public static System.Threading.Tasks.Task<IQArray<IQArray<Result>>> Run(IOperationFactory __m__, Int64 nQubits, Int64 idxMarked, Int64 nBits)
        {
            return __m__.Run<SampleManyRandomBits, (Int64,Int64,Int64), IQArray<IQArray<Result>>>((nQubits, idxMarked, nBits));
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 25, 34)]
    public partial class EstimateHeadsProbability : Operation<Int64, Double>, ICallable
    {
        public EstimateHeadsProbability(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "EstimateHeadsProbability";
        String ICallable.FullName => "MyGroversJob.EstimateHeadsProbability";
        public static EntryPointInfo<Int64, Double> Info => new EntryPointInfo<Int64, Double>(typeof(EstimateHeadsProbability));
        protected ICallable<(ICallable,ICallable,Int64,Int64), Double> Microsoft__Quantum__Characterization__EstimateFrequency
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Pauli>,IQArray<Qubit>), Result> Measure__
        {
            get;
            set;
        }

        public override Func<Int64, Double> __Body__ => (__in__) =>
        {
            var nShots = __in__;
#line 26 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            return Microsoft__Quantum__Characterization__EstimateFrequency.Apply((Microsoft__Quantum__Canon__ApplyToEach.Partial(new Func<IQArray<Qubit>, (ICallable,IQArray<Qubit>)>((__arg1__) => (Microsoft__Quantum__Intrinsic__H, __arg1__))), Measure__.Partial(new Func<IQArray<Qubit>, (IQArray<Pauli>,IQArray<Qubit>)>((__arg2__) => (new QArray<Pauli>(Pauli.PauliZ), __arg2__))), 1L, nShots));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Characterization__EstimateFrequency = this.__Factory__.Get<ICallable<(ICallable,ICallable,Int64,Int64), Double>>(typeof(global::Microsoft.Quantum.Characterization.EstimateFrequency));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Measure__ = this.__Factory__.Get<ICallable<(IQArray<Pauli>,IQArray<Qubit>), Result>>(typeof(global::Microsoft.Quantum.Intrinsic.Measure));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(Double data) => new QTuple<Double>(data);
        public static System.Threading.Tasks.Task<Double> Run(IOperationFactory __m__, Int64 nShots)
        {
            return __m__.Run<EstimateHeadsProbability, Int64, Double>(nShots);
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 34, 50)]
    public partial class GroversTest : Operation<(Int64,Int64), IQArray<Result>>, ICallable
    {
        public GroversTest(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "GroversTest";
        String ICallable.FullName => "MyGroversJob.GroversTest";
        protected IUnitary<(Int64,IQArray<Qubit>,Qubit)> MarkingNumber__
        {
            get;
            set;
        }

        protected IAdjointable<(IAdjointable,IQArray<Qubit>)> ApplyMarkingOracleAsPhaseOracle__
        {
            get;
            set;
        }

        protected ICallable<Int64, Int64> NIterations__
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid> RunGroversSearch__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__ForEach
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Measurement__MResetZ
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), IQArray<Result>> __Body__ => (__in__) =>
        {
            var (nQubits,idxMarked) = __in__;
#line 36 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            var markingOracle = MarkingNumber__.Partial(new Func<(IQArray<Qubit>,Qubit), (Int64,IQArray<Qubit>,Qubit)>((__arg1__) => (idxMarked, __arg1__.Item1, __arg1__.Item2)));
#line 37 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            var phaseOracle = ApplyMarkingOracleAsPhaseOracle__.Partial(new Func<IQArray<Qubit>, (IAdjointable,IQArray<Qubit>)>((__arg2__) => (markingOracle, __arg2__)));
#line 39 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            var nIterations = NIterations__.Apply(nQubits);
#line hidden
            {
#line 42 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                var qubits = Allocate__.Apply(nQubits);
#line hidden
                bool __arg3__ = true;
                try
                {
#line 44 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    RunGroversSearch__.Apply((qubits, phaseOracle, nIterations));
#line 46 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    return Microsoft__Quantum__Arrays__ForEach.Apply<IQArray<Result>>((Microsoft__Quantum__Measurement__MResetZ, qubits));
                }
#line hidden
                catch
                {
                    __arg3__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg3__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.MarkingNumber__ = this.__Factory__.Get<IUnitary<(Int64,IQArray<Qubit>,Qubit)>>(typeof(MarkingNumber));
            this.ApplyMarkingOracleAsPhaseOracle__ = this.__Factory__.Get<IAdjointable<(IAdjointable,IQArray<Qubit>)>>(typeof(ApplyMarkingOracleAsPhaseOracle));
            this.NIterations__ = this.__Factory__.Get<ICallable<Int64, Int64>>(typeof(NIterations));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.RunGroversSearch__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IAdjointable,Int64), QVoid>>(typeof(RunGroversSearch));
            this.Microsoft__Quantum__Arrays__ForEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.ForEach<,>));
            this.Microsoft__Quantum__Measurement__MResetZ = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Measurement.MResetZ));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__, Int64 nQubits, Int64 idxMarked)
        {
            return __m__.Run<GroversTest, (Int64,Int64), IQArray<Result>>((nQubits, idxMarked));
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 50, 57)]
    public partial class NIterations : Function<Int64, Int64>, ICallable
    {
        public NIterations(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "NIterations";
        String ICallable.FullName => "MyGroversJob.NIterations";
        protected ICallable<Double, Double> Microsoft__Quantum__Math__ArcSin
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Sqrt
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Round
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        public override Func<Int64, Int64> __Body__ => (__in__) =>
        {
            var nQubits = __in__;
#line 51 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            var nItems = (1L << (int)nQubits);
#line 52 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            var angle = Microsoft__Quantum__Math__ArcSin.Apply((1D / Microsoft__Quantum__Math__Sqrt.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply(nItems))));
#line 53 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            var nIterations = Microsoft__Quantum__Math__Round.Apply((((0.25D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)) / angle) - 0.5D));
#line 54 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            return nIterations;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__ArcSin = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.ArcSin));
            this.Microsoft__Quantum__Math__Sqrt = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Sqrt));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Math__Round = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Round));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
        }

        public override IApplyData __DataIn__(Int64 data) => new QTuple<Int64>(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 nQubits)
        {
            return __m__.Run<NIterations, Int64, Int64>(nQubits);
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 57, 65)]
    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Adjoint, 57, 65)]
    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Controlled, 57, 65)]
    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.ControlledAdjoint, 57, 65)]
    public partial class MarkingNumber : Unitary<(Int64,IQArray<Qubit>,Qubit)>, ICallable
    {
        public MarkingNumber(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((Int64,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "MarkingNumber";
        String ICallable.FullName => "MyGroversJob.MarkingNumber";
        protected ICallable Microsoft__Quantum__Canon__ControlledOnInt
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(Int64,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (idxMarked,inputQubits,target) = __in__;
#line 62 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((idxMarked, Microsoft__Quantum__Intrinsic__X)).Apply((inputQubits, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Int64,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (idxMarked,inputQubits,target) = __in__;
#line 57 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((idxMarked, Microsoft__Quantum__Intrinsic__X)).Adjoint.Apply((inputQubits, target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(idxMarked,inputQubits,target)) = __in__;
#line 57 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((idxMarked, Microsoft__Quantum__Intrinsic__X)).Controlled.Apply((__controlQubits__, (inputQubits, target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(Int64,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(idxMarked,inputQubits,target)) = __in__;
#line 57 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ControlledOnInt.Apply<IUnitary>((idxMarked, Microsoft__Quantum__Intrinsic__X)).Adjoint.Controlled.Apply((__controlQubits__, (inputQubits, target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ControlledOnInt = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ControlledOnInt<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((Int64,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 idxMarked, IQArray<Qubit> inputQubits, Qubit target)
        {
            return __m__.Run<MarkingNumber, (Int64,IQArray<Qubit>,Qubit), QVoid>((idxMarked, inputQubits, target));
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 65, 79)]
    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Adjoint, 65, 79)]
    public partial class ApplyMarkingOracleAsPhaseOracle : Adjointable<(IAdjointable,IQArray<Qubit>)>, ICallable
    {
        public ApplyMarkingOracleAsPhaseOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IAdjointable,IQArray<Qubit>)>, IApplyData
        {
            public In((IAdjointable,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ApplyMarkingOracleAsPhaseOracle";
        String ICallable.FullName => "MyGroversJob.ApplyMarkingOracleAsPhaseOracle";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line hidden
            {
#line 69 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                var target = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 71 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 72 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 74 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    markingOracle.Apply((register, target));
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IAdjointable,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (markingOracle,register) = __in__;
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            {
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                var __qsVar0__target__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(__qsVar0__target__);
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(__qsVar0__target__);
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    markingOracle.Adjoint.Apply((register, __qsVar0__target__));
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(__qsVar0__target__);
#line 65 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IAdjointable,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IAdjointable markingOracle, IQArray<Qubit> register)
        {
            return __m__.Run<ApplyMarkingOracleAsPhaseOracle, (IAdjointable,IQArray<Qubit>), QVoid>((markingOracle, register));
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 79, 87)]
    public partial class RunGroversSearch : Operation<(IQArray<Qubit>,IAdjointable,Int64), QVoid>, ICallable
    {
        public RunGroversSearch(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable,Int64)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "RunGroversSearch";
        String ICallable.FullName => "MyGroversJob.RunGroversSearch";
        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ReflectAboutUniform__
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable,Int64), QVoid> __Body__ => (__in__) =>
        {
            var (register,phaseOracle,iterations) = __in__;
#line 80 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__H, register));
#line 81 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            foreach (var __arg1__ in new QRange(1L, iterations))
#line hidden
            {
#line 82 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                phaseOracle.Apply(register);
#line 83 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
                ReflectAboutUniform__.Apply(register);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.ReflectAboutUniform__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(ReflectAboutUniform));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable,Int64) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable phaseOracle, Int64 iterations)
        {
            return __m__.Run<RunGroversSearch, (IQArray<Qubit>,IAdjointable,Int64), QVoid>((register, phaseOracle, iterations));
        }
    }

    [SourceLocation("C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs", OperationFunctor.Body, 87, -1)]
    public partial class ReflectAboutUniform : Operation<IQArray<Qubit>, QVoid>, ICallable
    {
        public ReflectAboutUniform(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "ReflectAboutUniform";
        String ICallable.FullName => "MyGroversJob.ReflectAboutUniform";
        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Most
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Tail
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var inputQubits = __in__;
#line 89 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__H, inputQubits));
#line 90 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__X, inputQubits));
#line 92 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Intrinsic__Z.Controlled.Apply((Microsoft__Quantum__Arrays__Most.Apply<IQArray<Qubit>>(inputQubits), Microsoft__Quantum__Arrays__Tail.Apply<Qubit>(inputQubits)));
#line 87 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, inputQubits));
#line 87 "C:\\Users\\padra\\OneDrive\\Documents\\GitHub\\msft-quantum-foundations\\MyGroversJob\\Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, inputQubits));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.Microsoft__Quantum__Arrays__Most = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Most<>));
            this.Microsoft__Quantum__Arrays__Tail = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Tail<>));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> inputQubits)
        {
            return __m__.Run<ReflectAboutUniform, IQArray<Qubit>, QVoid>(inputQubits);
        }
    }
}